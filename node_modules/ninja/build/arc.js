'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Arc = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Arc = exports.Arc = function (_Component) {
  _inherits(Arc, _Component);

  function Arc() {
    _classCallCheck(this, Arc);

    return _possibleConstructorReturn(this, Object.getPrototypeOf(Arc).apply(this, arguments));
  }

  _createClass(Arc, [{
    key: 'render',
    value: function render() {
      var _props = this.props;
      var children = _props.children;
      var degrees = _props.degrees;
      var degreesStart = _props.degreesStart;
      var fill = _props.fill;
      var percent = _props.percent;
      var stroke = _props.stroke;
      var strokeLinecap = _props.strokeLinecap;
      var strokeWidth = _props.strokeWidth;
      var width = _props.width;

      var center = width / 2;
      var radius = (width - strokeWidth) / 2;
      var strokeDasharray = 2 * Math.PI * radius;

      var decimal = this.props.decimal;

      if (degrees > 0) {
        decimal = degrees / 360;
      }
      if (percent > 0) {
        decimal = percent / 100;
      }
      if (decimal > 1) {
        decimal = 1;
      }

      var strokeDashoffset = strokeDasharray - strokeDasharray * decimal;
      var styles = {
        children: {
          alignItems: 'center',
          bottom: 0,
          display: 'flex',
          justifyContent: 'center',
          left: 0,
          position: 'absolute',
          right: 0,
          top: 0
        },
        graphic: { fill: fill, stroke: stroke, strokeLinecap: strokeLinecap, strokeWidth: strokeWidth, width: width },
        parent: { height: width, position: 'relative', width: width }
      };

      return _react2.default.createElement(
        'div',
        { style: styles.parent },
        _react2.default.createElement(
          'svg',
          { style: styles.graphic, viewBox: '0 0 ' + width + ' ' + width },
          _react2.default.createElement('circle', {
            cx: center,
            cy: center,
            is: true // Disable JSX magic attributes to support stroke-dashoffset.
            , r: radius,
            'stroke-dasharray': strokeDasharray,
            'stroke-dashoffset': strokeDashoffset,
            'stroke-width': strokeWidth,
            transform: 'rotate(' + degreesStart + ' ' + center + ' ' + center + ')' })
        ),
        _react2.default.createElement(
          'div',
          { style: styles.children },
          children
        )
      );
    }
  }]);

  return Arc;
}(_react.Component);

Arc.defaultProps = {
  decimal: 0,
  degreesStart: -90,
  fill: 'none',
  stroke: 'black',
  strokeLinecap: 'butt',
  strokeWidth: 4,
  width: 64
};

Arc.propTypes = {
  children: _react.PropTypes.node,
  decimal: _react.PropTypes.number,
  degrees: _react.PropTypes.number,
  degreesStart: _react.PropTypes.number,
  fill: _react.PropTypes.string,
  onClick: _react.PropTypes.func,
  percent: _react.PropTypes.number,
  stroke: _react.PropTypes.string,
  strokeLinecap: _react.PropTypes.string,
  strokeWidth: _react.PropTypes.number,
  style: _react.PropTypes.object,
  width: _react.PropTypes.number
};